@page
@model Test
@using Joonasw.AspNetCore.SecurityHeaders.TagHelpers
@{ Layout = null; }

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>BotPro v3.7 </title>
    <base href="/" />
    <link rel="stylesheet" href="css/wbbtheme.css" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />

    <base href="/" />
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
    <link href="_content/MudBlazor/MudBlazor.min.css?v=5.0.3" rel="stylesheet" />
    <link href="/css/ChatAgent.css" rel="stylesheet" />

    <link rel="manifest" href="manifest/manifest.json">

    <meta name="mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="msapplication-starturl" content="/">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <script src="js/CookieHandler.js"></script>
    <link href="https://unpkg.com/aos@2.3.1/dist/aos.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
    <link id="bootstrap5" href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <script src="localforage.js"></script>
    <script src="/js/recorder.js"></script>
    
    
    <script asp-add-nonce="true">
        window.AudioContext = window.AudioContext || window.webkitAudioContext;
        navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;


        let audioCtx;

         // This function visualizes the audio stream coming out of the user's microphone.
        function visualize(stream, canvas, canvasCtx) {
            if (!audioCtx) {
                audioCtx = new AudioContext();
            }

            const source = audioCtx.createMediaStreamSource(stream);

            const analyser = audioCtx.createAnalyser();
            analyser.fftSize = 2048;
            const bufferLength = analyser.frequencyBinCount;
            const dataArray = new Uint8Array(bufferLength);

            source.connect(analyser);
            //analyser.connect(audioCtx.destination);

            draw()

            function draw() {
                const WIDTH = canvas.width
                const HEIGHT = canvas.height;

                requestAnimationFrame(draw);

                analyser.getByteTimeDomainData(dataArray);

                canvasCtx.fillStyle = 'rgb(200, 200, 200)';
                canvasCtx.fillRect(0, 0, WIDTH, HEIGHT);

                canvasCtx.lineWidth = 2;
                canvasCtx.strokeStyle = 'rgb(0, 0, 0)';

                canvasCtx.beginPath();

                let sliceWidth = WIDTH * 1.0 / bufferLength;
                let x = 0;


                for (let i = 0; i < bufferLength; i++) {

                    let v = dataArray[i] / 128.0;
                    let y = v * HEIGHT / 2;

                    if (i === 0) {
                        canvasCtx.moveTo(x, y);
                    } else {
                        canvasCtx.lineTo(x, y);
                    }

                    x += sliceWidth;
                }

                canvasCtx.lineTo(canvas.width, canvas.height / 2);
                canvasCtx.stroke();

            }
        }

        window.MyJSMethods = {

            startRecording: function () {
                
                navigator.getUserMedia({ audio: true }, onSuccess, onError);
            },

            stopRecording: function (element) {
                stopVoiceRecorder();
            },
        };

        window.sendVoiceRecorder = async function (jwt) {
            var result = "";

            recorder.stop();
            let audio = document.querySelector('#audioVoice');

            await getAudioBlob(recorder).then(async s => {

                wav = window.URL.createObjectURL(s);
                audio.src = window.URL.createObjectURL(s);
                let filename = uuidv4() + ".mp3";
                let fd = new FormData();
                fd.append("file", s, filename);

                await fetch("/api/v1/ContactCenter/UpdateFile", 
                { body: fd, method: "Post", headers: {
                'Authorization': jwt
                } }).then(response => { return response.text(); }).then(text => { result = text });
            });

            stop.disabled = true;
            console.log(result);
            return result;
        }

        function uuidv4() {
            return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>
                (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
            );
        }

        function getAudioBlob(recorder) {
            return new Promise((resolve) => {
                recorder.exportWAV((blob) => {
                    resolve(blob);
                },"audio/mp3");
            });
        }

        let onError = function (err) {
            console.log('The following error occured: ' + err);
        };
                
        let recorder;
        let onSuccess = function (stream) {
            stop = document.querySelector('.stop');
            let context;
            
            stop.disabled = false;

            /*let mainSection = document.querySelector('.main-controls');*/
            const canvas = document.querySelector('.visualizer');
            /*canvas.width = mainSection.offsetWidth;*/

            const canvasCtx = canvas.getContext("2d");

            context = new AudioContext();
            let mediaStreamSource = context.createMediaStreamSource(stream);
            recorder = new Recorder(mediaStreamSource);
            recorder.record();

            visualize(stream, canvas, canvasCtx);
        }

        var stopVoiceRecorder = function () {
            stop = document.querySelector('.stop');
            recorder.stop();
            let audio = document.querySelector('#audioVoice');

            recorder.exportWAV(function (s) {
                wav = window.URL.createObjectURL(s);
                audio.src = window.URL.createObjectURL(s);

            });

            stop.disabled = true;

        }
        window.onresize = function () {
            /*let mainSection = document.querySelector('.main-controls');*/
            canvas = document.getElementById('canvas');
            /*canvas.width = mainSection.offsetWidth;*/
        }

        window.addEventListener('resize', function (event) {
            window.onresize();
        });

    </script>
    <script asp-add-nonce="true">

        window.scrollBotWindow = (divId) => {
            var div = document.getElementById(divId);
            if (div != null) {
                scrollTo(div, div.scrollHeight, 1000);
            }
        };

        window.PlaySound = function () {
            localforage.getItem('AgentInwindow').then(res => {
                return res;
            }).then(isAgentInwindow => {
                if (isAgentInwindow === "No") {
                    document.getElementById('sound').play();
                }
            });
        }

        window.getWindowDimensions = function () {
            return {
                width: window.innerWidth,
                height: window.innerHeight
            };
        };

        window.getWindowHeight = function () {
            return window.innerHeight;
        };

        window.downloadFile = async function (name, contentType, content) {

            //const arrayBuffer = await content.arrayBuffer();
            const blob = new Blob([content]);
            const url = window.URL.createObjectURL(blob);

            var anchorElement = document.createElement('a');
            anchorElement.href = url;
            anchorElement.download = name;
            anchorElement.click();
            anchorElement.remove();
        }

        window.DetectMobileDevice = function () {
            return /Android|webOS|iPhone|iPod|BlackBerry|IEMobile|Windows Phone|Opera Mini/i.test(navigator.userAgent);
        }

        window.AgentChatInitializer = function (lossHeight) {
            var height = $(window).height() - lossHeight;

            $('#scrollingBox').height(height);
            /*            $('#MainLayout')[0].style.display = "none";*/

            if ($('#ModalChat')[0] != undefined) {
                $('#ModalChat')[0].className = "modal Show animate__animated animate__fadeInRight animate__faster";
                $('#ModalChat')[0].style.display = "block";
                /*AOS.init();*/
                $("#chat_ModalBody")[0].scrollTop = $("#chat_ModalBody")[0].scrollHeight;

                $('#BackChat')[0].onclick = function () {
                    window.CloseChatModal();
                }

            }
        }

        window.ScrollAgentChatToEnd = function () {
            $("#chat_ModalBody")[0].scrollTop = $("#chat_ModalBody")[0].scrollHeight;
        }

        window.SetCookie = function (name, value) {
            localforage.setItem(name, value);
        }

        window.GetCookie = async function (name) {
            var valor = "";
            await localforage.getItem(name).then(res => {
                return res;
            }).then(value => {
                valor = value;               
            });
            return valor;
        }

        SendLogIn = async function (Username, Password, RememberMe) {
            var valueOfReturn = "";
            var formdata = new FormData();
            formdata.append("Username", Username);
            formdata.append("Password", Password);
            formdata.append("RememberMe", RememberMe);

            /*            $('#ProgressAgentFile')[0].style.display = "";*/

            await fetch("Authentication/IniciarSesion", { method: "Post", body: formdata }).then(Response => {
                return Response.text();
            }).then(text => {
                valueOfReturn = text;
            });

            /*            $('#ProgressAgentFile')[0].style.display = "none";*/
            return valueOfReturn;
        }

        window.CloseChatModal = function () {
            /*$('#ModalChat')[0].style.display = "none";*/
            $('#ModalChat')[0].className = "modal Show animate__animated animate__fadeOutRight animate__faster";
            /*            $('#MainLayout')[0].style.display = "";*/
        }

        window.ShowChatModal = function () {
            if ($('#ModalChat')[0] != undefined) {
                /*                $('#MainLayout')[0].style.display = "none";*/
                $('#ModalChat')[0].className = "modal Show animate__animated animate__fadeInRight animate__faster";
                $('#ModalChat')[0].style.display = "block";

                /* AOS.init();*/
            }
        }

        window.SetAgentFile = async function () {
            var valueOfReturn = "";
            var file = $('#fileInput')[0].files[0];
            var formdata = new FormData();
            formdata.append("file", file)

            $('#ProgressAgentFile')[0].style.display = "";

            await fetch("Files/UploadAgentFile", { method: "Post", body: formdata }).then(Response => {
                return Response.text();
            }).then(text => {
                valueOfReturn = text;
            });
            $('#ProgressAgentFile')[0].style.display = "none";
            return valueOfReturn;
        }

        var blinkMessage = function (message) {
            var oldTitle = document.title,                                                           /* save original title */
                timeoutId,
                blink = function () { document.title = document.title == message ? ' ' : message; },  /* function to BLINK browser tab */
                clear = function () {                                                                 /* function to set title back to original */
                    clearInterval(timeoutId);
                    document.title = oldTitle;
                    window.onmousemove = null;
                    timeoutId = null;
                };

            if (!timeoutId) {
                timeoutId = setInterval(blink, 1000);
                window.onmousemove = clear;                                                            /* stop changing title on moving the mouse */
            }
        };

        function LoadFrame(botId, userId, userName) {
            var eIfrm = document.getElementById('whatsappBotDemo');
            if (eIfrm != null) {
                var loc = `/Bots/WhatsAppSimulation/${botId}?userId=${userId}&userName=${userName}`;
                console.log(loc);
                eIfrm.src = loc;
            }
            return true;
        }

        function scrollTo(element, to, duration) {
            if (duration <= 0) return;

            var difference = to - element.scrollTop;
            var perTick = difference / duration * 100;

            setTimeout(function () {
                element.scrollTop = element.scrollTop + perTick;
                if (element.scrollTop === to) return;
                scrollTo(element, to, duration - 100);
            }, 50);
        }

        //window.TimerChecker = function (key) 
        //{
        //    jwt = key.toekenApi;
        //    dotNetHelperAgents = key.dotNetHelperAgents;
        //    setInterval(TChecker,30000);
        //}
        //async function TChecker()
        //{
        //    await fetch("/api/v1/ContactCenter/VerifyAgentConversations", {method:"Post", headers: {
        //         'Authorization': jwt
        //         }});

        //     dotNetHelperAgents.invokeMethodAsync('CheckConnection');
        //}

       window.GetDateTime = function()
       {
            var date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();
            var time = today.getHours() + ":" + today.getMinutes() + ":" + today.getSeconds();
            var dateTime = date+' '+time;
            return dateTime;
       }

       async function downloadFileFromStream(fileName, contentStreamReference) 
       {
          const arrayBuffer = await contentStreamReference.arrayBuffer();
          const blob = new Blob([arrayBuffer]);
          const url = URL.createObjectURL(blob);

          triggerFileDownload(fileName, url);

          URL.revokeObjectURL(url);
       }

       function triggerFileDownload(fileName, url) 
       {
          const anchorElement = document.createElement('a');
          anchorElement.href = url;
          anchorElement.download = fileName ?? '';
          anchorElement.click();
          anchorElement.remove();
       }

       function CalculateTheTimeOfRecess()
       {
           //document.getElementById("TimeInRecess").innerHTML="Tiempo en receso: 00:00:00";
           h = 0;
           m = 0;
           s = 0;
           cronometrar();
       }

       function cronometrar()
       {
            escribir();
            CronometerForRecess = setInterval(escribir,1000);
        }

        function escribir(){
            var hAux, mAux, sAux;
            s++;
            if (s>59){m++;s=0;}
            if (m>59){h++;m=0;}
            if (h>24){h=0;}

            if (s<10){sAux="0"+s;}else{sAux=s;}
            if (m<10){mAux="0"+m;}else{mAux=m;}
            if (h<10){hAux="0"+h;}else{hAux=h;}

           var item =  document.getElementById("TimeInRecess");

           if(item != null)
           {
               item.innerHTML = "Tiempo en receso: " + hAux + ":" + mAux + ":" + sAux; 
           }
        }

        function PararCronometro()
        {
            if(CronometerForRecess != null)
              clearInterval(CronometerForRecess);
        }

        
    </script>

    <!-- in the head element -->
    <link href="_content/Z.Blazor.Diagrams/style.min.css" rel="stylesheet" />
    <!-- if you want the default styling -->
    <link href="_content/Z.Blazor.Diagrams/default.styles.min.css" rel="stylesheet" />
    <!-- in the body element -->
    <script src="_content/Z.Blazor.Diagrams/script.min.js"></script>
</head>
<body>


    <!--Blazor:{"sequence":0,"type":"server","prerenderId":"7b1b61c0b34c40fdb380de1c7a4329f8","descriptor":"CfDJ8PL6YTS0TgpHiEjLlUkVVZp/gLPIy6sR\u002BdfJGLYtqFCN6qdJ9EjfG1eQrZocGeZcnUDMOYAtbGUlgPt6USP96E4ajsiYixq\u002Bs9VroQlntqhotPb8UltiCkdeUK1F\u002BjSyq3zk7oWozoPmik4XnM2r1EH8nLdR9q1JhqxY4qhcvNVslUz\u002Bl2ND7d4nSQr35Kg41iLeK1\u002B2DeJMMWe6mILwwoyco6daJWur60ldPPVjgri9iSEeL33369p0cktitYny3l6BGjbRag8tByZXvovkYvuUbk/moRBCrTGLyM9nnfRxUYAmWbY0BPDWPzh0uQnL1M9G55kb\u002BIXb\u002Bg\u002BPqIVH8SG6hxnoOhkf5cWroAQaJ9Z7"}--><style asp-add-nonce="true">
::-webkit-scrollbar {width: 8px;height: 8px;z-index: 1;}
::-webkit-scrollbar-track {background: transparent;}
::-webkit-scrollbar-thumb {background: #c4c4c4;border-radius: 1px;}
::-webkit-scrollbar-thumb:hover {background: #a6a6a6;}
html, body * {scrollbar-color: #c4c4c4 transparent;scrollbar-width: thin;}
</style>
<style asp-add-nonce="true">
    .mud-chart-serie:hover {
        filter: url(#lighten);
    }
</style>

<style asp-add-nonce="true">
:root{
--mud-palette-black: #272c34ff;
--mud-palette-white: #ffffffff;
--mud-palette-primary: #1e88e5ff;
--mud-palette-primary-rgb: 30,136,229;
--mud-palette-primary-text: #ffffffff;
--mud-palette-primary-darken: rgb(24,118,201);
--mud-palette-primary-lighten: rgb(63,154,233);
--mud-palette-primary-hover: rgba(30,136,229,0.058823529411764705);
--mud-palette-secondary: #7c4dffff;
--mud-palette-secondary-rgb: 124,77,255;
--mud-palette-secondary-text: #ffffffff;
--mud-palette-secondary-darken: rgb(98,41,255);
--mud-palette-secondary-lighten: rgb(150,112,255);
--mud-palette-secondary-hover: rgba(124,77,255,0.058823529411764705);
--mud-palette-tertiary: #1ec8a5ff;
--mud-palette-tertiary-rgb: 30,200,165;
--mud-palette-tertiary-text: #ffffffff;
--mud-palette-tertiary-darken: rgb(25,169,140);
--mud-palette-tertiary-lighten: rgb(42,223,187);
--mud-palette-tertiary-hover: rgba(30,200,165,0.058823529411764705);
--mud-palette-info: #2196f3ff;
--mud-palette-info-rgb: 33,150,243;
--mud-palette-info-text: #ffffffff;
--mud-palette-info-darken: rgb(12,128,223);
--mud-palette-info-lighten: rgb(71,167,245);
--mud-palette-info-hover: rgba(33,150,243,0.058823529411764705);
--mud-palette-success: #06d79cff;
--mud-palette-success-rgb: 6,215,156;
--mud-palette-success-text: #ffffffff;
--mud-palette-success-darken: rgb(5,179,130);
--mud-palette-success-lighten: rgb(6,249,180);
--mud-palette-success-hover: rgba(6,215,156,0.058823529411764705);
--mud-palette-warning: #ff9800ff;
--mud-palette-warning-rgb: 255,152,0;
--mud-palette-warning-text: #ffffffff;
--mud-palette-warning-darken: rgb(214,129,0);
--mud-palette-warning-lighten: rgb(255,167,36);
--mud-palette-warning-hover: rgba(255,152,0,0.058823529411764705);
--mud-palette-error: #f44336ff;
--mud-palette-error-rgb: 244,67,54;
--mud-palette-error-text: #ffffffff;
--mud-palette-error-darken: rgb(242,28,13);
--mud-palette-error-lighten: rgb(246,96,85);
--mud-palette-error-hover: rgba(244,67,54,0.058823529411764705);
--mud-palette-dark: #424242ff;
--mud-palette-dark-rgb: 66,66,66;
--mud-palette-dark-text: #ffffffff;
--mud-palette-dark-darken: rgb(46,46,46);
--mud-palette-dark-lighten: rgb(87,87,87);
--mud-palette-dark-hover: rgba(66,66,66,0.058823529411764705);
--mud-palette-text-primary: #424242ff;
--mud-palette-text-secondary: #00000089;
--mud-palette-text-disabled: #00000060;
--mud-palette-action-default: #00000089;
--mud-palette-action-default-hover: rgba(0,0,0,0.058823529411764705);
--mud-palette-action-disabled: #00000042;
--mud-palette-action-disabled-background: #0000001e;
--mud-palette-surface: #ffffffff;
--mud-palette-background: #fafafaff;
--mud-palette-background-grey: #f5f5f5ff;
--mud-palette-drawer-background: #ffffffff;
--mud-palette-drawer-text: #000000b2;
--mud-palette-drawer-icon: #616161ff;
--mud-palette-appbar-background: #1e88e5ff;
--mud-palette-appbar-text: #ffffffff;
--mud-palette-lines-default: #0000001e;
--mud-palette-lines-inputs: #bdbdbdff;
--mud-palette-table-lines: #e0e0e0ff;
--mud-palette-table-striped: #00000005;
--mud-palette-table-hover: #0000000a;
--mud-palette-divider: #e0e0e0ff;
--mud-palette-divider-light: #000000cc;
--mud-palette-grey-default: #9E9E9E;
--mud-palette-grey-light: #BDBDBD;
--mud-palette-grey-lighter: #E0E0E0;
--mud-palette-grey-dark: #757575;
--mud-palette-grey-darker: #616161;
--mud-palette-overlay-dark: rgba(33,33,33,0.4980392156862745);
--mud-palette-overlay-light: rgba(255,255,255,0.4980392156862745);
--mud-elevation-0: none;
--mud-elevation-1: 0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12);
--mud-elevation-2: 0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12);
--mud-elevation-3: 0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12);
--mud-elevation-4: 0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12);
--mud-elevation-5: 0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12);
--mud-elevation-6: 0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12);
--mud-elevation-7: 0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12);
--mud-elevation-8: 0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12);
--mud-elevation-9: 0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12);
--mud-elevation-10: 0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12);
--mud-elevation-11: 0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12);
--mud-elevation-12: 0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12);
--mud-elevation-13: 0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12);
--mud-elevation-14: 0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12);
--mud-elevation-15: 0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12);
--mud-elevation-16: 0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12);
--mud-elevation-17: 0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12);
--mud-elevation-18: 0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12);
--mud-elevation-19: 0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12);
--mud-elevation-20: 0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12);
--mud-elevation-21: 0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12);
--mud-elevation-22: 0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12);
--mud-elevation-23: 0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12);
--mud-elevation-24: 0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12);
--mud-elevation-25: 0 5px 5px -3px rgba(0,0,0,.06), 0 8px 10px 1px rgba(0,0,0,.042), 0 3px 14px 2px rgba(0,0,0,.036);
--mud-default-borderradius: 3px;
--mud-drawer-width-left: 240px;
--mud-drawer-width-right: 240px;
--mud-drawer-width-mini-left: 56px;
--mud-drawer-width-mini-right: 56px;
--mud-appbar-height: 64px;
--mud-typography-default-family: 'Montserrat','Helvetica','Arial','sans-serif';
--mud-typography-default-size: .875rem;
--mud-typography-default-weight: 400;
--mud-typography-default-lineheight: 1.43;
--mud-typography-default-letterspacing: .01071em;
--mud-typography-default-text-transform: none;
--mud-typography-h1-family: 'Montserrat','Helvetica','Arial','sans-serif';
--mud-typography-h1-size: 6rem;
--mud-typography-h1-weight: 300;
--mud-typography-h1-lineheight: 1.167;
--mud-typography-h1-letterspacing: -.01562em;
--mud-typography-h1-text-transform: none;
--mud-typography-h2-family: 'Montserrat','Helvetica','Arial','sans-serif';
--mud-typography-h2-size: 3.75rem;
--mud-typography-h2-weight: 300;
--mud-typography-h2-lineheight: 1.2;
--mud-typography-h2-letterspacing: -.00833em;
--mud-typography-h2-text-transform: none;
--mud-typography-h3-family: 'Montserrat','Helvetica','Arial','sans-serif';
--mud-typography-h3-size: 3rem;
--mud-typography-h3-weight: 400;
--mud-typography-h3-lineheight: 1.167;
--mud-typography-h3-letterspacing: 0;
--mud-typography-h3-text-transform: none;
--mud-typography-h4-family: 'Montserrat','Helvetica','Arial','sans-serif';
--mud-typography-h4-size: 2.125rem;
--mud-typography-h4-weight: 400;
--mud-typography-h4-lineheight: 1.235;
--mud-typography-h4-letterspacing: .00735em;
--mud-typography-h4-text-transform: none;
--mud-typography-h5-family: 'Montserrat','Helvetica','Arial','sans-serif';
--mud-typography-h5-size: 1.5rem;
--mud-typography-h5-weight: 400;
--mud-typography-h5-lineheight: 1.334;
--mud-typography-h5-letterspacing: 0;
--mud-typography-h5-text-transform: none;
--mud-typography-h6-family: 'Montserrat','Helvetica','Arial','sans-serif';
--mud-typography-h6-size: 1.25rem;
--mud-typography-h6-weight: 400;
--mud-typography-h6-lineheight: 1.6;
--mud-typography-h6-letterspacing: .0075em;
--mud-typography-h6-text-transform: none;
--mud-typography-subtitle1-family: 'Montserrat','Helvetica','Arial','sans-serif';
--mud-typography-subtitle1-size: 1rem;
--mud-typography-subtitle1-weight: 400;
--mud-typography-subtitle1-lineheight: 1.75;
--mud-typography-subtitle1-letterspacing: .00938em;
--mud-typography-subtitle1-text-transform: none;
--mud-typography-subtitle2-family: 'Montserrat','Helvetica','Arial','sans-serif';
--mud-typography-subtitle2-size: .875rem;
--mud-typography-subtitle2-weight: 500;
--mud-typography-subtitle2-lineheight: 1.57;
--mud-typography-subtitle2-letterspacing: .00714em;
--mud-typography-subtitle2-text-transform: none;
--mud-typography-body1-family: 'Montserrat','Helvetica','Arial','sans-serif';
--mud-typography-body1-size: 1rem;
--mud-typography-body1-weight: 400;
--mud-typography-body1-lineheight: 1.5;
--mud-typography-body1-letterspacing: .00938em;
--mud-typography-body1-text-transform: none;
--mud-typography-body2-family: 'Montserrat','Helvetica','Arial','sans-serif';
--mud-typography-body2-size: .875rem;
--mud-typography-body2-weight: 400;
--mud-typography-body2-lineheight: 1.43;
--mud-typography-body2-letterspacing: .01071em;
--mud-typography-body2-text-transform: none;
--mud-typography-button-family: 'Montserrat','Helvetica','Arial','sans-serif';
--mud-typography-button-size: .875rem;
--mud-typography-button-weight: 500;
--mud-typography-button-lineheight: 1.75;
--mud-typography-button-letterspacing: .02857em;
--mud-typography-button-text-transform: uppercase;
--mud-typography-caption-family: 'Montserrat','Helvetica','Arial','sans-serif';
--mud-typography-caption-size: .75rem;
--mud-typography-caption-weight: 400;
--mud-typography-caption-lineheight: 1.66;
--mud-typography-caption-letterspacing: .03333em;
--mud-typography-caption-text-transform: none;
--mud-typography-overline-family: 'Montserrat','Helvetica','Arial','sans-serif';
--mud-typography-overline-size: .75rem;
--mud-typography-overline-weight: 400;
--mud-typography-overline-lineheight: 2.66;
--mud-typography-overline-letterspacing: .08333em;
--mud-typography-overline-text-transform: none;
--mud-zindex-drawer: 1100;
--mud-zindex-appbar: 1300;
--mud-zindex-dialog: 1400;
--mud-zindex-popover: 1200;
--mud-zindex-snackbar: 1500;
--mud-zindex-tooltip: 1600;
}
.container-100vh{
height: 100vh;
}
.paper-100-w500p{
width:100%;
max-width:500px;
}
</style>



<div class="mud-popover-provider"></div>
<div id="mud-snackbar-container" class="mud-snackbar-location-top-right"></div>

<div class="mud-container mud-container-maxwidth-sm d-flex align-center container-100vh" ><div class="d-flex flex-column mud-width-full"><div class="mud-paper mud-elevation-25 pa-8 paper-100-w500p" ><img src="/img/Botpro-logo-268x69.png" alt="BotPro Logo">
            </div></div></div><!--Blazor:{"prerenderId":"7b1b61c0b34c40fdb380de1c7a4329f8"}-->

    <div id="blazor-error-ui">
        
            Se ha producido un error. Es posible que la aplicación ya no responda hasta que se vuelva a cargar.
        
        
        <a href="" class="reload">Recargar</a>
        <a class="dismiss">🗙</a>
    </div>
    
    <div id="components-reconnect-modal">
    </div>

    <!-- Import the plotly.js library -->
    <script src="_content/Plotly.Blazor/plotly-latest.min.js" type="text/javascript"></script>

    <!-- Import the plotly.js interop functions -->
    <script src="_content/Plotly.Blazor/plotly-interop.js" type="text/javascript"></script>
    <script src="_framework/blazor.server.js"></script>
    <script src="_content/MudBlazor/MudBlazor.min.js"></script>

<script asp-add-nonce="true">
        // This is the "Offline copy of pages" service worker
        var swRegistration;
        // Add this below content to your HTML page, or add the js file to your page at the very top to register service worker

        // Check compatibility for the browser we're running this in
        if ("serviceWorker" in navigator) {
            if (navigator.serviceWorker.controller) {
                navigator.serviceWorker.ready.then(function (serviceWorkerRegistration) {
                    swRegistration = serviceWorkerRegistration;

                    /* initialiseUI();*/

                    //console.log(swRegistration);
                });
                console.log("[PWA Builder] active service worker found, no need to register");
            } else {
                // Register the service worker
                navigator.serviceWorker
                    .register("/pwabuilder-sw.js")
                    .then(function (reg) {
                        console.log("[PWA Builder] Service worker has been registered for scope: " + reg.scope);
                    });
            }
        }
    </script>

<script src="js/NotificationSubscriber.js"></script>
    <script type="module" src="./js/PdfExport.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://unpkg.com/aos@2.3.1/dist/aos.js"></script>
<script id="bootstrap5" src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>

<script asp-add-nonce="true">
        window.onload = function () {
            if (window.DetectMobileDevice() != true) {
                var bootstrap = document.getElementById("bootstrap5");
                bootstrap.outerHTML = "";
            }
        }
    </script>

<script  src="/js/wysibb/jquery.wysibb.js"></script>
<script  src="/js/wysibb/es.js"></script>

<script asp-add-nonce="true">
function GetHTMLCode(){
    return $("#editor").htmlcode();
}
function SetHTMLCode(htmlcode){
    return $("#editor").htmlcode(htmlcode);
}
function GetBBCode(){
    return $("#editor").bbcode(); 
}
function showEditor(){
$(document).ready(function() {
    var wbbOpt = {
        autoresize:false,
        lang : 	 "es",
        buttons: "bold,italic,strike,underline,monospace,|,img",
        hotkeys: false, //disable hotkeys (native browser combinations will work)
        showHotkeys: false //hide combination in the tooltip when you hover.
    }
    $("#editor").css("height","255px");
    $("#editor").wysibb(wbbOpt)
});
}
</script>

<script type="module" src="https://cdn.freshstatus.io/widget/index.js"></script>
<script asp-add-nonce="true">
        var agentsUrl = "/ContactCenter/Index";
        setInterval(function(){
            var elem = document.getElementById("blazor-error-ui");
            if(elem != null && elem.style.display == "block"){
                window.location.assign(agentsUrl);
            }
        }, 1000);
    </script>
</body>
</html>